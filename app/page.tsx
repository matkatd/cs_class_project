"use client";
import React, { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  Typography,
  Toolbar,
  Select,
  MenuItem,
  SelectChangeEvent,
  InputLabel,
  FormControl,
} from "@mui/material";
import { ClassObj } from "@/public/types";
import { ClassCard } from "@/components/ClassCard";

const MainClassesPage = () => {
  const [classes, setClasses] = useState([]);
  const [selectedClassStanding, setSelectedClassStanding] = useState("");
  const [selectedEmphasis, setSelectedEmphasis] = useState("");
  const [selectedDifficulty, setSelectedDifficulty] = useState(0);
  const [classStanding, setClassStanding] = useState([""]);
  const [emphases, setEmphases] = useState([""]);
  const [difficulty, setDifficulty] = useState([""]);

  // Much of this was initially generated by ChatGPT. I modified it so it actually worked, but ChatGPT did the heavy lifting
  // The quotes were entirly generated by ChatGPT

  useEffect(() => {
    // Fetch quotes from the external JSON file
    fetch("/classes.json")
      .then((response) => response.json())
      .then((data) => {
        setClasses(data);
        // Extract unique categories
        const uniqueClassStandings = [
          ...new Set<string>(
            data.flatMap((classObj: ClassObj) => classObj.classStanding)
          ),
        ];
        const uniqueEmphases = [
          ...new Set<string>(
            data.flatMap((classObj: ClassObj) => classObj.emphasis)
          ),
        ];
        const uniqueDifficulties = [
          ...new Set<string>(
            data.flatMap((classObj: ClassObj) => classObj.perceivedDifficulty)
          ),
        ];
        setEmphases(uniqueEmphases);
        setDifficulty(uniqueDifficulties);
        setClassStanding(uniqueClassStandings);
      })
      .catch((error) => console.error("Error fetching classes:", error));
  }, []);

  useEffect(() => {
    // Filter subcategories based on the selected category
    const filteredEmphases = classes
      .filter(
        (classObj: ClassObj) => classObj.classStanding == selectedClassStanding
      )
      .flatMap((classObj: ClassObj) => classObj.emphasis);

    // Extract unique subcategories
    const uniqueSubcategories = [...new Set(filteredEmphases)];
    setEmphases(uniqueSubcategories);
  }, [selectedClassStanding, classes]);

  const handleClassStandingChange = (event: SelectChangeEvent<string>) => {
    const classStanding = event.target.value;
    setSelectedClassStanding(classStanding);
    // Reset subcategory when changing category
    setSelectedEmphasis("");
    setSelectedDifficulty(0);
  };

  const handleEmphasisChange = (event: SelectChangeEvent<string>) => {
    setSelectedEmphasis(event.target.value);
  };

  const handleDifficultyChange = (event: SelectChangeEvent<number>) => {
    const difficulty: number = event.target.value as number;
    setSelectedDifficulty(difficulty);
  };
  return (
    <div>
      <Toolbar
        sx={{ background: "#1cd968", borderRadius: "5px", padding: "1rem" }}
      >
        <FormControl fullWidth sx={{ pr: "1rem" }}>
          <InputLabel id="class-standing-select-label">
            Class Standing
          </InputLabel>
          <Select
            sx={{ background: "#31ad62", opacity: 0.8 }}
            variant="filled"
            labelId="class-standing-select-label"
            fullWidth
            value={selectedClassStanding}
            onChange={handleClassStandingChange}
          >
            <MenuItem value="">All Class Standings</MenuItem>
            {classStanding.map((category) => (
              <MenuItem key={category} value={category}>
                {category}
              </MenuItem>
            ))}
          </Select>
        </FormControl>
        <FormControl fullWidth sx={{ pr: "1rem" }}>
          <InputLabel id="emphasis-select-label">Emphasis</InputLabel>
          <Select
            variant="filled"
            sx={{ background: "#31ad62", opacity: 0.8 }}
            labelId="emphasis-select-label"
            fullWidth
            value={selectedEmphasis}
            onChange={handleEmphasisChange}
          >
            <MenuItem value="">All Emphases</MenuItem>
            {emphases.map((subcategory) => (
              <MenuItem key={subcategory} value={subcategory}>
                {subcategory}
              </MenuItem>
            ))}
          </Select>
        </FormControl>
        <FormControl fullWidth>
          <InputLabel id="difficulty-select-label">
            Perceived Difficulty
          </InputLabel>
          <Select
            variant="filled"
            sx={{ background: "#31ad62", opacity: 0.8 }}
            labelId="difficulty-select-label"
            fullWidth
            value={selectedDifficulty}
            onChange={handleDifficultyChange}
          >
            <MenuItem value="">All Difficulties</MenuItem>
            {difficulty.map((author) => (
              <MenuItem key={author} value={author}>
                {author}
              </MenuItem>
            ))}
          </Select>
        </FormControl>
      </Toolbar>

      {/* Render quotes based on selected category and subcategory */}
      {classes
        .filter(
          (classObj: ClassObj) =>
            (!selectedClassStanding ||
              classObj.classStanding == selectedClassStanding) &&
            (!selectedEmphasis || classObj.emphasis == selectedEmphasis) &&
            (!selectedDifficulty ||
              classObj.perceivedDifficulty === selectedDifficulty)
        )
        .map((classObj: ClassObj) => (
          <ClassCard key={classObj.courseName} classObj={classObj} />
        ))}
    </div>
  );
};

export default MainClassesPage;
